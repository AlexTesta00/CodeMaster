name: CI/CD

on:
  push:
  pull_request:

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '23.5.0'
          check-latest: false
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.4.1
      - name: Make gradlew executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew
      - name: Build with Gradle (Unix)
        if: runner.os != 'Windows'
        run: ./gradlew clean build --no-build-cache
      - name: Build with Gradle (Windows)
        if: runner.os == 'Windows'
        run: .\gradlew.bat clean build --no-build-cache
        shell: pwsh
      - name: Upload coverage
        if: runner.os == 'Linux' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            authentication-service/coverage/lcov.info
            codequest-service/coverage/lcov.info
            community-service/coverage/lcov.info
            user-service/coverage/lcov.info
            solution-service/build/reports/kover/report.xml
            code-generator-service/build/reports/kover/report.xml
          flags: combined
          name: codecov-umbrella
          fail_ci_if_error: true

  release:
    needs: build-and-test
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '23.5.0'
          check-latest: false
      - name: Install dependencies
        run: npm install
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
      - name: Get version from Git tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "$VERSION" > version.txt
      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  delivery-docker-image:
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    env:
      IMAGE_PREFIX: wealecs
    strategy:
      matrix:
        service: [authentication-service, codequest-service, user-service, multi-lang-runner, solution-service, community-service, code-generator-service]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version
      - name: Read version from file
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
          cat version.txt
      - name: Build Docker image
        run: |
          IMAGE_NAME="${{ env.IMAGE_PREFIX }}/${{ matrix.service }}"
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ env.VERSION }} ./${{ matrix.service }}

      - name: Push Docker image
        run: |
          IMAGE_NAME="${{ env.IMAGE_PREFIX }}/${{ matrix.service }}"
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ env.VERSION }}

  deploy-docs:
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Create static Swagger docs folder
        run: |
          mkdir -p docs/static/openapi
          cp docs/authentication/swagger.yaml docs/static/openapi/authentication.yaml
          cp docs/user/swagger.yaml docs/static/openapi/user.yaml
          cp docs/code-generator/swagger.yaml docs/static/openapi/code-generator.yaml
          cp docs/codequest/swagger.yaml docs/static/openapi/codequest.yaml
          cp docs/community/swagger.yaml docs/static/openapi/community.yaml
          cp docs/solution/swagger.yaml docs/static/openapi/solution.yaml

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: 'docs-pages'
          path: docs/static

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: 'docs-pages'