name: CI/CD

on:
  push:
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '23.5.0'
          check-latest: false
      - name: Fix /etc/resolv.conf
        run: |
          sudo rm -f /etc/resolv.conf
          sudo ln -s /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dbus systemd
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.4.1
      - name: Add Permission To Gradle
        run:  chmod +x ./gradlew
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.12.0
        with:
          mongodb-version: 'latest'
          mongodb-port: '27017'
      - name: Set MONGO_URI environement variable
        run: echo "MONGO_URI=mongodb://localhost:27017/test" >> $GITHUB_ENV
      - name: Set SOLUTION_RUNNER_PATH environment variable
        run: echo "SOLUTION_RUNNER_PATH=build/tmp/code-run" >> $GITHUB_ENV
      - name: Pull RabbitMQ image
        run: docker pull rabbitmq:3-management
      - name: Set RABBITMQ_URL env variable
        run: echo "RABBITMQ_URL=amqp://guest:guest@localhost" >> $GITHUB_ENV
      - name: Build with Gradle
        env:
          MONGO_URI: ${{ env.MONGO_URI }}
          RUNNER_PATH: ${{ github.workspace }}/build/tmp/code-run
        run: ./gradlew clean build --no-build-cache
      - name: Upload coverage for authentication-service
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: authentication-service/coverage/lcov.info
          flags: authentication-service
          name: codecov-umbrella
          fail_ci_if_error: true
      - name: Upload coverage for codequest-service
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codequest-service/coverage/lcov.info
          flags: codequest-service
          name: codecov-umbrella
          fail_ci_if_error: true
      - name: Upload coverage for community-service
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: community-service/coverage/lcov.info
          flags: community-service
          name: codecov-umbrella
          fail_ci_if_error: true
      - name: Upload coverage for user-service
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: user-service/coverage/lcov.info
          flags: user-service
          name: codecov-umbrella
          fail_ci_if_error: true
      - name: Upload coverage for solution-service
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: solution-service/build/reports/kover/report.xml
          flags: solution-service
          name: codecov-umbrella
          fail_ci_if_error: true
      - name: Upload coverage for generator-service
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: code-generator-service/build/reports/kover/report.xml
          flags: code-generator-service
          name: codecov-umbrella
          fail_ci_if_error: true

  release:
    needs: build-and-test
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '23.5.0'
          check-latest: false
      - name: Install dependencies
        run: npm install
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  delivery-docker-image:
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    env:
      IMAGE_PREFIX: wealecs
    strategy:
      matrix:
        service: [authentication-service, codequest-service, user-service, multi-lang-runner, solution-service, community-service, code-generator-service]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        run: |
          IMAGE_NAME="${{ env.IMAGE_PREFIX }}/${{ matrix.service }}"
          docker build -t $IMAGE_NAME:latest ./${{ matrix.service }}
      - name: Push Docker image
        run: |
          IMAGE_NAME="${{ env.IMAGE_PREFIX }}/${{ matrix.service }}"
          docker push $IMAGE_NAME:latest

  deploy-docs:
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Create static Swagger docs folder
        run: |
          mkdir -p docs/static/openapi
          cp docs/authentication/openapi.yaml docs/static/openapi/authentication.yaml
          cp docs/user/openapi.yaml docs/static/openapi/user.yaml

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: 'docs-pages'
          path: docs/static

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: 'docs-pages'