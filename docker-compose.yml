services:
  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-user:
    image: mongo
    command: ['mongod', '--quiet', '--logpath', '/dev/null']
    ports:
      - '27017:27017'
    volumes:
      - mongo_data_user:/codemaster/user/db

  mongo-express-user:
    image: mongo-express
    restart: always
    ports:
      - '8081:8081'
    depends_on:
      mongo-user:
        condition: service_started
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo-user:27017/codemaster-user-db"

  codemaster-user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '4005:4005'
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo-user:
        condition: service_started
    env_file:
      - ./user-service/.env
    environment:
      - RABBITMQ_URL=amqp://guest:guest@host.docker.internal

  mongo-authentication:
    image: mongo
    command: ['mongod', '--quiet', '--logpath', '/dev/null']
    ports:
      - '27018:27017'
    volumes:
      - mongo_data_authentication:/codemaster/authentication/db

  mongo-express-authentication:
    image: mongo-express
    restart: always
    ports:
      - '8082:8081'
    depends_on:
      mongo-authentication:
        condition: service_started
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo-authentication:27017/codemaster-authentication-db"

  codemaster-authentication-service:
    build:
      context: ./authentication-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '4004:4004'
    depends_on:
      mongo-authentication:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./authentication-service/.env
    environment:
      - RABBITMQ_URL=amqp://guest:guest@host.docker.internal

  mongo-codequest:
    image: mongo
    command: [ 'mongod', '--quiet', '--logpath', '/dev/null' ]
    ports:
      - '27019:27017'
    volumes:
      - mongo_data_codequest:/codemaster/codequest/db

  mongo-express-codequest:
    image: mongo-express
    restart: always
    ports:
      - '8083:8081'
    depends_on:
      mongo-codequest:
        condition: service_started
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo-codequest:27017/codemaster-codequest-db"

  codemaster-codequest-service:
    build:
      context: ./codequest-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo-codequest:
        condition: service_started
    env_file:
      - ./codequest-service/.env

  mongo-community:
    image: mongo
    command: [ 'mongod', '--quiet', '--logpath', '/dev/null' ]
    ports:
      - '27021:27017'
    volumes:
      - mongo_data_community:/codemaster/community/db

  mongo-express-community:
    image: mongo-express
    restart: always
    ports:
      - '8085:8081'
    depends_on:
      mongo-community:
        condition: service_started
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo-community:27017/codemaster-community-db"

  codemaster-community-service:
    build:
      context: ./community-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '4007:4007'
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo-community:
        condition: service_started
    env_file:
      - ./community-service/.env
    environment:
      - RABBITMQ_URL=amqp://guest:guest@host.docker.internal

  mongo-solution:
    image: mongo
    command: [ 'mongod', '--quiet', '--logpath', '/dev/null' ]
    ports:
      - '27020:27017'
    volumes:
      - mongo_data_solution:/codemaster/solution/db

  mongo-express-solution:
    image: mongo-express
    restart: always
    ports:
      - '8084:8081'
    depends_on:
      mongo-solution:
        condition: service_started
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo-solution:27017/codemaster-solution-db"

  codemaster-solution-service:
    build:
      context: ./solution-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '4006:4006'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - runner-cache:/app/build/tmp/code-run
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo-solution:
        condition: service_started
    env_file:
      - ./solution-service/.env
    environment:
      - SOLUTION_RUNNER_PATH=/app/build/tmp/code-run
      - RABBITMQ_URL=amqp://guest:guest@host.docker.internal

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - '80:80'
    depends_on:
      codemaster-user-service:
        condition: service_started
      codemaster-authentication-service:
        condition: service_started
      codemaster-codequest-service:
        condition: service_started
      codemaster-solution-service:
        condition: service_started
      codemaster-community-service:
        condition: service_started

  codemaster-docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
    ports:
      - '3001:3000'
    restart: always

  populate-db:
    build:
        context: ./populate-db
        dockerfile: Dockerfile
    depends_on:
      codemaster-authentication-service:
        condition: service_started
      codemaster-user-service:
        condition: service_started
      codemaster-codequest-service:
        condition: service_started
      codemaster-solution-service:
        condition: service_started
      codemaster-community-service:
        condition: service_started
    volumes:
      - ./populate-db:/app
    working_dir: /app
    command: ["sh", "-c", "sleep 20 && python db-service.py"]

  frontend-service:
    build:
      context: ./frontend-service
      dockerfile: Dockerfile
    depends_on:
      codemaster-authentication-service:
        condition: service_started
      codemaster-user-service:
        condition: service_started
      codemaster-solution-service:
        condition: service_started
      codemaster-codequest-service:
        condition: service_started
      codemaster-community-service:
        condition: service_started
    ports:
      - "5173:5173"

volumes:
  mongo_data_user:
  mongo_data_authentication:
  mongo_data_codequest:
  mongo_data_solution:
  mongo_data_community:
  runner-cache:
  rabbitmq_data: